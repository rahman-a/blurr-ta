// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  positions Position[]
  employees Employee[]
}

model Position {
  id           String   @id @default(cuid())
  title        String
  description  String?
  departmentId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  employees  Employee[]
}

model Employee {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  email        String   @unique
  phone        String?
  hireDate     DateTime @default(now())
  departmentId String
  positionId   String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department Department @relation(fields: [departmentId], references: [id], onDelete: Restrict)
  position   Position   @relation(fields: [positionId], references: [id], onDelete: Restrict)
  salaries   Salary[]
}

model Compensation {
  id           String           @id @default(cuid())
  name         String
  amount       Float
  description  String?
  isActive     Boolean          @default(true)
  type         CompensationType
  isPercentage Boolean          @default(false)
  salaries     Salary[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([name])
}

model Salary {
  id String @id @default(cuid())

  // Basic Salary Information
  basicSalary Float
  grossSalary Float // Total salary before any deductions
  netSalary   Float // Take-home salary after all deductions
  currency    String     @default("USD")
  salaryType  SalaryType @default(MONTHLY) // "hourly", "monthly", "yearly"

  // Dates and Status
  effectiveDate DateTime  @default(now())
  endDate       DateTime?
  isActive      Boolean   @default(true)

  // Relationships
  employeeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee      Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  compensations Compensation[]

  @@index([employeeId, isActive])
}

enum CompensationType {
  ALLOWANCE
  BONUS
  DEDUCTION
}

enum SalaryType {
  HOURLY
  MONTHLY
  YEARLY
}
